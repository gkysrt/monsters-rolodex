{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","element","SearchBox","placeholder","onChange","value","type","App","state","searchField","handleChange","bind","fetch","then","response","json","users","setState","event","target","this","prevState","console","log","filteredList","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAGaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAK,yBAA2BH,EAAMI,QAAQC,GAAK,2BACtE,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KACf,SAAAC,GAAO,OAAI,cAAC,EAAD,CAAuBP,QAASO,GAArBA,EAAQN,UCJ7BO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,MAAOT,EAAhC,EAAgCA,KAAhC,OACrB,uBACIO,YAAeA,EACfZ,UAAY,YACZe,KAAO,OACPF,SAAYA,EACZC,MAASA,EACTT,KAAQA,MC6DDW,E,kDAjEb,WAAYjB,GACX,IAAD,8BACI,cAAMA,IACDkB,MAAQ,CACXC,YAAa,GACbV,SAAU,CACR,CACEH,KAAM,eACND,GAAI,GAEN,CACEC,KAAM,UACND,GAAI,GAEN,CACEC,KAAM,SACND,GAAI,KAQV,EAAKe,aAAe,EAAKA,aAAaC,KAAlB,gBAvBxB,E,gEA2BC,IAAD,OACEC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAClB,SAAUiB,S,mCAG7BE,GACZ,IAAD,SACyCA,EAAMC,OAAhCvB,GADf,EACSU,KADT,EACeV,MAAiBS,GADhC,EACqBd,UADrB,EACgCc,OAC9Be,KAAKH,UAAS,SAAAI,GACZ,OAAO,eACJzB,EAAOS,MAET,kBAAMiB,QAAQC,IAAI,EAAKf,Y,+BAM3B,IAAD,EACkCY,KAAKZ,MAA9BT,EADT,EACSA,SAAUU,EADnB,EACmBA,YACXe,EAAezB,EAAS0B,QAAO,SAAAxB,GAAO,OAAIA,EAAQL,KAAK8B,cAAcC,SAASlB,EAAYiB,kBAChG,OACE,sBAAKnC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,CACEY,YAAY,kBACZC,SAAUgB,KAAKV,aACfL,MAAOe,KAAKZ,MAAMC,YAClBb,KAAK,gBACP,uBACA,cAAC,EAAD,CAAUG,SAAUyB,W,GA7DVI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.944216e8.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt='monster' src={'https://robohash.org/$' + props.monster.id + '?set=set2&size=180x180'} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component.jsx'\n\nexport const CardList = props => \n    <div className=\"card-list\">\n        {\n            props.monsters.map(\n            element => <Card key={element.id} monster={element}/>\n                )\n        }\n    </div>","import React from 'react';\nimport './search-box.styles.css';\n\n\nexport const SearchBox = ({placeholder, onChange, value, name}) => \n    <input \n        placeholder = {placeholder}\n        className = 'searchBox'\n        type = 'text'\n        onChange = {onChange}\n        value = {value}\n        name = {name}\n    />","import React from 'react'\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends React.Component\n{\n  constructor(props)\n  {\n      super(props);\n      this.state = {\n        searchField: '',\n        monsters: [\n          {\n            name: 'Frankenstein',\n            id: 1\n          },\n          {\n            name: 'Dracula',\n            id: 2\n          },\n          {\n            name: 'Zombie',\n            id: 3\n          }\n        ]\n      }\n      \n      // Javascript feature. Javascript methods has to know their context \n      // ( My guess: so that everytime \"this\" pointer is used, it will refer to that context? Or to be able to have a reference to that function using 'this' pointer ) \n      // Can use arrow func instead. Arrow functions are automatically binded to class they're contained within. So do anonymous functions\n      this.handleChange = this.handleChange.bind(this); \n  }\n  \n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange(event)\n  {\n    const {type, name, className, value} = event.target\n    this.setState(prevState => {\n      return {\n        [name]: value\n      }\n    }, () => console.log(this.state))\n\n    // this.setState(func to set state, callback) is an asyncronous function \n  }\n  \n  render()\n  {\n    const {monsters, searchField} = this.state;\n    const filteredList = monsters.filter(element => element.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1 className='title'>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='Search Monsters'\n          onChange={this.handleChange}\n          value={this.state.searchField}\n          name='searchField'/>\n        <br/>\n        <CardList monsters={filteredList}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}